export const natures = [
  'hardy',
  'lonely',
  'brave',
  'adamant',
  'naughty',
  'bold',
  'docile',
  'relaxed',
  'impish',
  'lax',
  'timid',
  'hasty',
  'serious',
  'jolly',
  'naive',
  'modest',
  'mild',
  'quiet',
  'bashful',
  'rash',
  'calm',
  'gentle',
  'sassy',
  'careful',
  'quirky',
] as const

const toJp = {
  hardy: 'がんばりや',
  lonely: 'さみしがり',
  brave: 'ゆうかん',
  adamant: 'いじっぱり',
  naughty: 'やんちゃ',
  bold: 'ずぶとい',
  docile: 'すなお',
  relaxed: 'のんき',
  impish: 'わんぱく',
  lax: 'のうてんき',
  timid: 'おくびょう',
  hasty: 'せっかち',
  serious: 'まじめ',
  jolly: 'ようき',
  naive: 'むじゃき',
  modest: 'ひかえめ',
  mild: 'おっとり',
  quiet: 'れいせい',
  bashful: 'てれや',
  rash: 'うっかりや',
  calm: 'おだやか',
  gentle: 'おとなしい',
  sassy: 'なまいき',
  careful: 'しんちょう',
  quirky: 'きまぐれ',
} as const satisfies Record<Nature, string>

const fromJp = Object.fromEntries(Object.entries(toJp).map(([k, v]) => [v, k])) as Record<NatureJp, Nature>

export type Nature = (typeof natures)[number]
export type NatureJp = (typeof toJp)[Nature]
export const toJapanese = <T extends Nature>(nature: T) => toJp[nature]
export const natureToInt = (nature: NatureJp) => natures.indexOf(fromJp[nature])

export const statFactors: Record<Nature, [number, number, number, number, number, number]> = {
  hardy: [1, 1, 1, 1, 1, 1],
  lonely: [1, 1.1, 0.9, 1, 1, 1],
  brave: [1, 1.1, 1, 1, 1, 0.9],
  adamant: [1, 1.1, 1, 0.9, 1, 1],
  naughty: [1, 1.1, 1, 1, 0.9, 1],
  bold: [1, 0.9, 1.1, 1, 1, 1],
  docile: [1, 1, 1, 1, 1, 1],
  relaxed: [1, 1, 1.1, 1, 1, 0.9],
  impish: [1, 1, 1.1, 0.9, 1, 1],
  lax: [1, 1, 1.1, 1, 0.9, 1],
  timid: [1, 0.9, 1, 1, 1, 1.1],
  hasty: [1, 1, 0.9, 1, 1, 1.1],
  serious: [1, 1, 1, 1, 1, 1],
  jolly: [1, 1, 1, 0.9, 1, 1.1],
  naive: [1, 1, 1, 1, 0.9, 1.1],
  modest: [1, 0.9, 1, 1.1, 1, 1],
  mild: [1, 1, 0.9, 1.1, 1, 1],
  quiet: [1, 1, 1, 1.1, 1, 0.9],
  bashful: [1, 1, 1, 1, 1, 1],
  rash: [1, 1, 1, 1.1, 0.9, 1],
  calm: [1, 0.9, 1, 1, 1.1, 1],
  gentle: [1, 1, 0.9, 1, 1.1, 1],
  sassy: [1, 1, 1, 1, 1.1, 0.9],
  careful: [1, 1, 1, 0.9, 1.1, 1],
  quirky: [1, 1, 1, 1, 1, 1],
}
